[{"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\styles\\global.ts":"1","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ModalEditCountry\\index.tsx":"2","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Modal\\index.tsx":"3","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ModalEditCountry\\styles.ts":"4","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\pages\\Dashboard\\index.tsx":"5","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Card\\styles.ts":"6","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Card\\index.tsx":"7","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Input\\styles.ts":"8","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Input\\index.tsx":"9","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\InputMask\\index.tsx":"10","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\pages\\Dashboard\\styles.ts":"11","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\InputMask\\styles.ts":"12","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\InputMask2\\styles.ts":"13","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\App.tsx":"14","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ToastContainer\\index.tsx":"15","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ToastContainer\\styles.ts":"16","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\InputMask2\\index.tsx":"17","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\services\\api.ts":"18","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\hooks\\toast.tsx":"19","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\hooks\\index.tsx":"20","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ToastContainer\\Toast\\styles.ts":"21","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ToastContainer\\Toast\\index.tsx":"22"},{"size":391,"mtime":1610470333517,"results":"23","hashOfConfig":"24"},{"size":2239,"mtime":1610747518180,"results":"25","hashOfConfig":"26"},{"size":1241,"mtime":1610556362225,"results":"27","hashOfConfig":"28"},{"size":2113,"mtime":1610598427961,"results":"29","hashOfConfig":"28"},{"size":6617,"mtime":1610749826261,"results":"30","hashOfConfig":"26"},{"size":1476,"mtime":1610677807566,"results":"31","hashOfConfig":"28"},{"size":1422,"mtime":1610676934086,"results":"32","hashOfConfig":"26"},{"size":883,"mtime":1610730802328,"results":"33","hashOfConfig":"28"},{"size":794,"mtime":1610747585392,"results":"34","hashOfConfig":"26"},{"size":912,"mtime":1610717507214,"results":"35","hashOfConfig":"26"},{"size":3817,"mtime":1610731789415,"results":"36","hashOfConfig":"37"},{"size":535,"mtime":1610726092913,"results":"38","hashOfConfig":"28"},{"size":784,"mtime":1610743339735,"results":"39","hashOfConfig":"26"},{"size":374,"mtime":1610747479598,"results":"40","hashOfConfig":"26"},{"size":793,"mtime":1610742198028,"results":"41","hashOfConfig":"26"},{"size":171,"mtime":1610740058387,"results":"42","hashOfConfig":"26"},{"size":1026,"mtime":1610747556051,"results":"43","hashOfConfig":"26"},{"size":127,"mtime":1610485347015,"results":"44","hashOfConfig":"37"},{"size":1441,"mtime":1610739617210,"results":"45","hashOfConfig":"26"},{"size":196,"mtime":1610735891414,"results":"46","hashOfConfig":"26"},{"size":1374,"mtime":1610744296604,"results":"47","hashOfConfig":"26"},{"size":1180,"mtime":1610741794236,"results":"48","hashOfConfig":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zuss1q",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1637jwa",{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"say7pt",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6jr4x3",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\styles\\global.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ModalEditCountry\\index.tsx",["95"],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Modal\\index.tsx",["96","97"],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ModalEditCountry\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\pages\\Dashboard\\index.tsx",["98","99","100"],"import React, { FormEvent, useEffect, useRef, useState } from 'react';\nimport { FormHandles } from '@unform/core';\nimport api from '../../services/api';\nimport apiJson from '../../services/apiJson';\nimport InputMask2 from '../../components/InputMask2';\nimport Input from '../../components/Input';\nimport { useToast } from '../../hooks/toast';\n\nimport {\n  Header,\n  Container,\n  Content,\n  SubNav,\n  Label,\n  Select,\n  ButtonAdd,\n  ContentHeader,\n  CardsContainer,\n  Form,\n} from './styles';\n\nimport logoImg from '../../assets/logoclubpetro.svg';\nimport Card from '../../components/Card/index';\nimport ModalEditCountry from '../../components/ModalEditCountry';\n\ninterface ICountry {\n  id?: string;\n  name: string;\n  flag: string;\n  // br: Translate;\n  translations?: string;\n}\n\ninterface ICountryJson {\n  id: number;\n  name: string;\n  local: string;\n  meta: string;\n  flag: string;\n  translation: string;\n  // -\n}\n\nconst Dashboard: React.FC = () => {\n  const [countrySelected, setCountrySelected] = useState('');\n  const { addToast } = useToast();\n  const [\n    countrySelectedEditForm,\n    setCountrySelectedEditForm,\n  ] = useState<ICountryJson>();\n  const [countries, setCountries] = useState<ICountry[]>([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [editingCountry, setEditingCountry] = useState<ICountryJson>(\n    {} as ICountryJson,\n  );\n  const [databaseCountries, setDatabaseCountries] = useState<ICountryJson[]>(\n    [],\n  );\n  const [local, setLocal] = useState(editingCountry.local);\n  const [meta, setMeta] = useState(editingCountry.meta);\n  const formRef = useRef<FormHandles>(null);\n\n  useEffect(() => {\n    api.get('/all').then(response => {\n      const array = response.data.map(\n        (item: {\n          name: string;\n          flag: string;\n          translations: { br: string };\n        }) => {\n          return {\n            name: item.name,\n            flag: item.flag,\n            translations: item.translations.br,\n          };\n        },\n      );\n      setCountries(array);\n    });\n\n    loadCountries();\n  }, []);\n\n  async function handleAddCrountry(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    // event.preventDefault();\n\n    const data = countries.filter(item => item.name === countrySelected);\n    const { flag, translations: translation } = data[0];\n\n    addToast({\n      type: 'success',\n      title: 'Cadastro realizado com sucesso',\n      description: `${local}/${translation} adicionado com sucesso`,\n    });\n\n    await apiJson.post('/add', {\n      name: countrySelected,\n      local,\n      meta,\n      flag,\n      translation,\n    });\n    setMeta('');\n    setLocal('');\n    formRef.current?.reset();\n    formRef.current?.clearField('local');\n    formRef.current?.clearField('meta');\n    formRef.current?.clearField('name');\n\n    await loadCountries();\n  }\n\n  async function handleUpdateCountry(country: ICountryJson): Promise<void> {\n    try {\n      const response = await apiJson.put(`/add/${editingCountry.id}`, {\n        ...editingCountry,\n        ...country,\n      });\n      setDatabaseCountries(\n        databaseCountries.map(mappedCountry =>\n          mappedCountry.id === editingCountry.id\n            ? { ...response.data }\n            : mappedCountry,\n        ),\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function loadCountries(): Promise<void> {\n    const response = await apiJson.get('/add');\n    setDatabaseCountries(response.data);\n  }\n\n  async function handleDeleteCountry(id: number): Promise<void> {\n    try {\n      await apiJson.delete(`/add/${id}`);\n\n      addToast({\n        type: 'success',\n        title: 'Excluído com sucesso',\n        description: `Lugar deletado com sucesso`,\n      });\n\n      setDatabaseCountries(\n        databaseCountries.filter(country => country.id !== id),\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function handleEditCountry(country: ICountryJson): void {\n    setEditingCountry(country);\n    toggleEditModal();\n  }\n\n  function toggleModal(countrySel: ICountryJson): void {\n    setModalOpen(!modalOpen);\n    setCountrySelectedEditForm(countrySel);\n  }\n\n  function toggleEditModal(): void {\n    setModalOpen(false);\n    loadCountries();\n  }\n\n  return (\n    <>\n      <Container>\n        <Header>\n          <ContentHeader>\n            <img src={logoImg} alt=\"Logo\" />\n          </ContentHeader>\n        </Header>\n\n        <Content>\n          <ModalEditCountry\n            isOpen={modalOpen}\n            setIsOpen={toggleEditModal}\n            handleUpdateCountry={handleUpdateCountry}\n            editingCountry={countrySelectedEditForm}\n            countries={countries}\n          />\n          <SubNav>\n            <Form onSubmit={handleAddCrountry} ref={formRef}>\n              <div>\n                <Label>País</Label>\n                <Select\n                  name=\"name\"\n                  onChange={event => setCountrySelected(event.target.value)}\n                >\n                  <option disabled selected>\n                    Selecione ...\n                  </option>\n                  {countries.map(country => (\n                    <option key={country.name} value={country.name}>\n                      {country.translations}\n                    </option>\n                  ))}\n                </Select>\n              </div>\n              <div>\n                <Label>Local</Label>\n                <Input\n                  width=\"large\"\n                  name=\"local\"\n                  value={local}\n                  placeholder=\"Defina o local que deseja conhecer\"\n                  onChange={event => setLocal(event.target.value)}\n                />\n              </div>\n\n              <div>\n                <Label>Meta</Label>\n                <InputMask2\n                  width=\"large\"\n                  mask=\"99/9999\"\n                  name=\"meta\"\n                  placeholder=\"mês/ano\"\n                  onChange={event => setMeta(event.target.value)}\n                />\n              </div>\n              <ButtonAdd type=\"submit\">Adicionar</ButtonAdd>\n            </Form>\n          </SubNav>\n          <CardsContainer>\n            {databaseCountries &&\n              databaseCountries.map(country => (\n                <Card\n                  openModal={() => toggleModal(country)}\n                  key={country.id}\n                  country={country}\n                  handleEditCountry={handleEditCountry}\n                  handleDeleteCountry={handleDeleteCountry}\n                />\n              ))}\n          </CardsContainer>\n        </Content>\n      </Container>\n    </>\n  );\n};\n\nexport default Dashboard;\n","D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Card\\styles.ts",[],["101","102","103","104","105"],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Card\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Input\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\Input\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\InputMask\\index.tsx",["106"],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\pages\\Dashboard\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\InputMask\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\InputMask2\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\App.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ToastContainer\\index.tsx",["107"],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ToastContainer\\styles.ts",["108"],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\InputMask2\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\services\\api.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\hooks\\toast.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\hooks\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ToastContainer\\Toast\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\desafio-clubpetro\\src\\components\\ToastContainer\\Toast\\index.tsx",[],{"ruleId":"109","severity":1,"message":"110","line":49,"column":3,"nodeType":"111","messageId":"112","endLine":49,"endColumn":12},{"ruleId":"109","severity":1,"message":"113","line":6,"column":11,"nodeType":"111","messageId":"112","endLine":6,"endColumn":19},{"ruleId":"114","severity":1,"message":"115","line":17,"column":13,"nodeType":"116","messageId":"117","endLine":17,"endColumn":16,"suggestions":"118"},{"ruleId":"109","severity":1,"message":"119","line":85,"column":5,"nodeType":"111","messageId":"112","endLine":85,"endColumn":38},{"ruleId":"120","severity":1,"message":"121","line":129,"column":7,"nodeType":"122","messageId":"123","endLine":129,"endColumn":18},{"ruleId":"120","severity":1,"message":"121","line":152,"column":7,"nodeType":"122","messageId":"123","endLine":152,"endColumn":18},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"114","severity":1,"message":"115","line":23,"column":21,"nodeType":"116","messageId":"117","endLine":23,"endColumn":24,"suggestions":"134"},{"ruleId":"109","severity":1,"message":"135","line":5,"column":24,"nodeType":"111","messageId":"112","endLine":5,"endColumn":32},{"ruleId":"109","severity":1,"message":"136","line":1,"column":18,"nodeType":"111","messageId":"112","endLine":1,"endColumn":21},"@typescript-eslint/no-unused-vars","'countries' is defined but never used.","Identifier","unusedVar","'ICountry' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["137","138"],"'event' is defined but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","lines-around-directive",["139"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["140","141"],"'useToast' is defined but never used.","'css' is defined but never used.",{"messageId":"142","fix":"143","desc":"144"},{"messageId":"145","fix":"146","desc":"147"},"padding-line-between-statements",{"messageId":"142","fix":"148","desc":"144"},{"messageId":"145","fix":"149","desc":"147"},"suggestUnknown",{"range":"150","text":"151"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"150","text":"152"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"153","text":"151"},{"range":"153","text":"152"},[302,305],"unknown","never",[647,650]]